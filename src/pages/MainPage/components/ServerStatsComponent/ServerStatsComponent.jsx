import {useGetServerTimeQuery} from "../../../../services/stats.js";
import "./ServerStatsComponent.css"

export function ServerStatsComponent() {
    const {data} = useGetServerTimeQuery(undefined, {
        pollingInterval: 60000,
        skipPollingIfUnfocused: true,
    })
    if (data) {
        displayMinecraftTime(data)
    }
    return (<div className="game-stats mb-4 text-center">
        { data && displayMinecraftTime(data)}
    </div>)
}

function displayMinecraftTime(data) {
    const daytime = data.daytime;
    const gameTime = data.game_time;

    let partOfDay, enemyStatus, isEnemiesSpawn, dayTimeColor;

    if (0 <= daytime && daytime < 6000) {
        partOfDay = "–£—Ç—Ä–µ—á–∫–æ üåÖ";
        enemyStatus = "–ó–ª—ã—Ö –º–æ–Ω—Å—Ç—Ä–æ–≤ –Ω–µ—Ç üïäÔ∏è";
        isEnemiesSpawn = false;
        dayTimeColor = "#ADD8E6";
    } else if (6000 <= daytime && daytime < 12000) {
        partOfDay = "–î–µ–Ω—å ‚òÄÔ∏è";
        enemyStatus = "–í—Ä–∞–≥–æ–≤ –Ω–µ—Ç üïäÔ∏è";
        isEnemiesSpawn = false;
        dayTimeColor = "#FFD700"
    } else if (12000 <= daytime && daytime < 13000) {
        partOfDay = "–í–µ—á–µ—Ä üåá";
        enemyStatus = "–í—Ä–∞–≥–æ–≤ –Ω–µ—Ç, –Ω–æ —Å–∫–æ—Ä–æ –±—É–¥—É—Ç üïäÔ∏è";
        isEnemiesSpawn = false;
        dayTimeColor = "#FFB6C1"
    } else if (13000 <= daytime && daytime < 18000) {
        partOfDay = "–ù–æ—á—å üåå";
        enemyStatus = "–ó–æ–Ω–¥–±—ç –≤—ã–ª–µ–∑–∞—é—Ç –∏–∑ –º–æ–≥–∏–ª üßü";
        isEnemiesSpawn = true;
        dayTimeColor = "#DC143C"
    } else if (18000 <= daytime && daytime < 22000) {
        partOfDay = "–ü–æ–ª–Ω–æ—á—å üåô";
        enemyStatus = "–ü–æ–≤—Å—é–¥—É –±—Ä–æ–¥—è—Ç –∑–ª—ã–µ –∑–æ–Ω–¥–±—ç üßü";
        isEnemiesSpawn = true;
        dayTimeColor = "#4169E1"
    } else {
        partOfDay = "–í–æ—Å—Ö–æ–¥ —Å–æ–ª–Ω—Ü–∞ üåÑ";
        enemyStatus = "–°–æ–ª–Ω—Ü–µ —É–∂–µ –≤–æ—Å—Ö–æ–¥–∏—Ç, –Ω–æ –∑–æ–Ω–¥–±—ç –µ—â–µ —Ö–æ–¥—è—Ç üßüÔ∏è";
        isEnemiesSpawn = true;
        dayTimeColor = "#FFA07A";
    }

    const gameTimeHours = Math.floor(gameTime / (20 * 60 * 60));
    const gameTimeMinutes = Math.floor((gameTime / (20 * 60)) % 60);
    const cumulativeTime = `${gameTimeHours}—á ${gameTimeMinutes}–º`;


    return (<div>
        <p>
            –ù–∞ —Å–µ—Ä–≤–µ—Ä–µ <span style={{color: dayTimeColor}}>{partOfDay}</span> <span
            style={{color: isEnemiesSpawn ? "#FF6B6B" : "#A8E6CF"}}>{enemyStatus}</span>
            <span> –ù–∞–∏–≥—Ä–∞–Ω–æ <strong>{cumulativeTime}</strong>.</span>
        </p>
    </div>)
}